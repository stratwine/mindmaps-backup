<map version="0.9.0">
<!-- To view this file, download free mind mapping software FreeMind from http://freemind.sourceforge.net -->
<node CREATED="1377241365779" ID="ID_1045547779" MODIFIED="1377426899501" TEXT="DataStructures">
<node CREATED="1377243273863" FOLDED="true" ID="ID_764104537" MODIFIED="1377595183556" POSITION="right" TEXT="Graph">
<node CREATED="1377241391244" FOLDED="true" ID="ID_760231523" MODIFIED="1377421910052" TEXT="representation">
<node CREATED="1377241403868" ID="ID_1253381922" MODIFIED="1377241449096" TEXT="Might be asked to run dfs or bfs starting at any vertex"/>
<node CREATED="1377241453846" ID="ID_511755314" MODIFIED="1377241494262" TEXT="So retrieving a vertex should be in O(1)"/>
<node CREATED="1377241495278" FOLDED="true" ID="ID_73861818" MODIFIED="1377243914999" TEXT="Supported by vertices being held in arrays">
<node CREATED="1377243887909" ID="ID_1360310512" MODIFIED="1377243907203" TEXT="or reverse lookup from &apos;name&apos; to array index"/>
<node CREATED="1377243858928" ID="ID_526187443" MODIFIED="1377243871036" TEXT="or else, would require hashmap"/>
</node>
<node CREATED="1377241514025" ID="ID_1291128881" MODIFIED="1377241520821" TEXT="Adjacency List">
<node CREATED="1377241529461" ID="ID_434799472" MODIFIED="1377241547974" TEXT="Let each vertex be implicitly named by the array index"/>
<node CREATED="1377241587250" ID="ID_740310577" MODIFIED="1377241607232" TEXT="Let there be a collection for each vertex that contains the edges ">
<node CREATED="1377241624511" ID="ID_222182870" MODIFIED="1377241630948" TEXT="Should support iteration"/>
<node CREATED="1377241608341" ID="ID_483448714" MODIFIED="1377241623668" TEXT="Should support add()"/>
<node CREATED="1377242219045" ID="ID_879556167" MODIFIED="1377242235792" TEXT="Bag&lt;Integer&gt;"/>
</node>
<node CREATED="1377242326171" ID="ID_1265649673" MODIFIED="1377242335764" TEXT="Much like in the case of HashMap"/>
</node>
<node CREATED="1377241521415" ID="ID_292905230" MODIFIED="1377241525290" TEXT="Adjacency matrix">
<node CREATED="1377241560785" ID="ID_903702252" MODIFIED="1377241576564" TEXT="The row and column name specifies the vertices names"/>
</node>
<node CREATED="1377243807388" ID="ID_77429127" MODIFIED="1377244009987" TEXT="Edge ">
<node CREATED="1377244012596" ID="ID_1398717825" MODIFIED="1377244014221" TEXT="is made {v,w,weight}    "/>
<node CREATED="1377243989037" ID="ID_661839026" MODIFIED="1377243990521" TEXT="either() returns one of the vertex     other() returns the other vertex "/>
<node CREATED="1377243975867" ID="ID_731597285" MODIFIED="1377243987537" TEXT=" {v,w} are the endpoints "/>
</node>
</node>
<node CREATED="1377243417407" FOLDED="true" ID="ID_1080230373" MODIFIED="1377421905787" TEXT="search">
<node CREATED="1377243476430" FOLDED="true" ID="ID_206055700" MODIFIED="1377277141630" TEXT="Single Source">
<node CREATED="1377243437201" ID="ID_1664292758" MODIFIED="1377243444825" TEXT="BFS from single source"/>
<node CREATED="1377243420797" ID="ID_1787700170" MODIFIED="1377243431046" TEXT="DFS from a single source"/>
<node CREATED="1377243523706" ID="ID_1123147091" MODIFIED="1377243531595" TEXT="Check reachability"/>
</node>
<node CREATED="1377243472853" FOLDED="true" ID="ID_1022512559" MODIFIED="1377244036203" TEXT="All source">
<node CREATED="1377243445341" ID="ID_1751473424" MODIFIED="1377243449434" TEXT="BFS from all sources"/>
<node CREATED="1377243431842" ID="ID_695486540" MODIFIED="1377243466619" TEXT="DFS from all sources"/>
<node CREATED="1377243503989" ID="ID_1203582351" MODIFIED="1377243511801" TEXT="Find number of connected sets"/>
</node>
</node>
<node CREATED="1377243555467" FOLDED="true" ID="ID_1690697032" MODIFIED="1377421902063" TEXT="modeling">
<node CREATED="1377282439741" ID="ID_532114846" MODIFIED="1377282449735" TEXT="Edge weight may represent">
<node CREATED="1377282487740" ID="ID_1907157163" MODIFIED="1377282519963" TEXT="cost">
<node CREATED="1377282529594" ID="ID_985082202" MODIFIED="1377282551694" TEXT="slower / faster"/>
<node CREATED="1377282526022" ID="ID_1621210390" MODIFIED="1377282545564" TEXT="cheaper / costier"/>
</node>
<node CREATED="1377282453973" ID="ID_185622759" MODIFIED="1377282484520" TEXT="distance"/>
</node>
<node CREATED="1377243614741" ID="ID_1197102164" MODIFIED="1377282435365" TEXT="Each edge might represent ">
<node CREATED="1377243669671" ID="ID_1154620217" MODIFIED="1377243678280" TEXT="a social relationship "/>
<node CREATED="1377243630801" ID="ID_784079586" MODIFIED="1377243664594" TEXT="a virtual connection (intranet / internet map)"/>
<node CREATED="1377243684560" ID="ID_922324406" MODIFIED="1377243701105" TEXT="a choice"/>
<node CREATED="1377243749552" ID="ID_740193474" MODIFIED="1377243755317" TEXT="a possible transformation"/>
<node CREATED="1377243564575" ID="ID_1866015000" MODIFIED="1377243624849" TEXT="a physical connection (map connecting cities)"/>
</node>
</node>
<node CREATED="1377273129509" FOLDED="true" ID="ID_475939033" MODIFIED="1377429611478" TEXT="shortest paths">
<node CREATED="1377423047549" ID="ID_1935971139" MODIFIED="1377423154821" TEXT="all sources to single destination"/>
<node CREATED="1377273136356" FOLDED="true" ID="ID_1165785418" MODIFIED="1377429610388" TEXT="single source to all destinations">
<node CREATED="1377277051794" ID="ID_1642106182" MODIFIED="1377423715806" TEXT="bfs (if all weights are &apos;1&apos;)"/>
<node CREATED="1377277075717" FOLDED="true" ID="ID_416898737" MODIFIED="1377423123530" TEXT="dijkstra (if there are no -ve weights)">
<node CREATED="1377421934418" ID="ID_1732891452" MODIFIED="1377421943443" TEXT="DijkstraSP">
<node CREATED="1377421980295" ID="ID_1268095533" MODIFIED="1377421993767" TEXT="IndexedMinPQ&lt;Double&gt; pq"/>
<node CREATED="1377422081804" ID="ID_1681284270" MODIFIED="1377422124394" TEXT="edgeTo[v] : last-edge on shortest s,v path"/>
<node CREATED="1377421960828" ID="ID_264866011" MODIFIED="1377421971475" TEXT="DirectedEdge[] edgeTo"/>
<node CREATED="1377421950451" ID="ID_1554672041" MODIFIED="1377421956703" TEXT="double[] distTo"/>
<node CREATED="1377422030019" ID="ID_1907366447" MODIFIED="1377422115298" TEXT="distTo[v] : distance of shortest s-&gt;v path"/>
</node>
</node>
<node CREATED="1377423330638" ID="ID_1883653347" MODIFIED="1377423343943" TEXT="shortest path from one city to all other cities"/>
<node CREATED="1377423267237" ID="ID_1915263292" MODIFIED="1377423309429" TEXT="if SP to single destination is desired, stop with that destn"/>
<node CREATED="1377423385555" ID="ID_666587457" MODIFIED="1377423420470" TEXT="without min pq --&gt; quadratic"/>
<node CREATED="1377423398861" ID="ID_1658302110" MODIFIED="1377423421689" TEXT="with min pq --&gt; O(E+VlogV)"/>
<node CREATED="1377423760011" FOLDED="true" ID="ID_1899982169" MODIFIED="1377429609580" TEXT="steps">
<node CREATED="1377423763665" ID="ID_781707549" MODIFIED="1377426289675" TEXT="dist[v]=0 for souce node&#xa;dist[v]=INF for all other nodes&#xa;Mark all nodes as unvisited"/>
<node CREATED="1377426293296" ID="ID_1574528008" MODIFIED="1377426301358" TEXT="insert the source to pq"/>
<node CREATED="1377426315862" FOLDED="true" ID="ID_1324147650" MODIFIED="1377429108288" TEXT="iterate when pq is not empty">
<node CREATED="1377426334808" ID="ID_1993729135" MODIFIED="1377428869079" TEXT="extract the vertex to which weight is minimal"/>
<node CREATED="1377426495548" FOLDED="true" ID="ID_1807685263" MODIFIED="1377428825777" TEXT="for all edges e adjacent, relax(e)">
<node CREATED="1377426581275" ID="ID_480567143" MODIFIED="1377426947009" TEXT="relax(DirectedEdge e) :"/>
<node CREATED="1377426603594" ID="ID_542483086" MODIFIED="1377426977661" TEXT="have v:e.from() and w: e.to() vertices from edge object"/>
<node CREATED="1377426643448" FOLDED="true" ID="ID_1473883493" MODIFIED="1377428306054" TEXT="dist[v] + e.weight &lt; dist[w] ?">
<node CREATED="1377426911945" ID="ID_149935788" MODIFIED="1377427017852" TEXT="if yes">
<node CREATED="1377427027697" ID="ID_1681191144" MODIFIED="1377427036264" TEXT="this edge is chosen in SP over the previous"/>
<node CREATED="1377426677284" ID="ID_833736218" MODIFIED="1377426926179" TEXT="update dist[w]"/>
<node CREATED="1377426743967" ID="ID_1528631077" MODIFIED="1377426762895" TEXT="update edgeTo[w]=e"/>
<node CREATED="1377426691218" ID="ID_180200538" MODIFIED="1377426732313" TEXT="insert / update in minPQ"/>
<node CREATED="1377427052988" ID="ID_1403458351" MODIFIED="1377427071842" TEXT="insert if w was not already present"/>
<node CREATED="1377427062670" ID="ID_1630717325" MODIFIED="1377427073145" TEXT="update if w was already present"/>
</node>
<node CREATED="1377426916048" ID="ID_26999910" MODIFIED="1377426917477" TEXT="if no">
<node CREATED="1377426933542" ID="ID_296634029" MODIFIED="1377426935375" TEXT="do nothing"/>
</node>
</node>
</node>
</node>
<node CREATED="1377426845146" ID="ID_1072830936" MODIFIED="1377426859768" TEXT="dist[] gives the shortest dist to all destns"/>
</node>
</node>
<node CREATED="1377273144584" ID="ID_505520717" MODIFIED="1377423168699" TEXT="all sources to all destinations"/>
</node>
<node CREATED="1377273498164" FOLDED="true" ID="ID_1846695296" MODIFIED="1377285117924" TEXT="topological sort">
<node CREATED="1377285068014" ID="ID_1777731930" MODIFIED="1377285097007" TEXT="if cycle exists, no topological-sorted order exists"/>
<node CREATED="1377285099015" ID="ID_1600006017" MODIFIED="1377285113263" TEXT="used for dependency resolution order"/>
<node CREATED="1377276996750" ID="ID_99420164" MODIFIED="1377277012146" TEXT="order in which the dfs completes"/>
</node>
<node CREATED="1377279178449" ID="ID_1974159210" MODIFIED="1377279192362" TEXT="undirected / directed"/>
<node CREATED="1377242470512" FOLDED="true" ID="ID_81098799" MODIFIED="1377279176030" TEXT="MST">
<node CREATED="1377276929335" FOLDED="true" ID="ID_203668182" MODIFIED="1377276973168" TEXT="implementation (kruskal)">
<node CREATED="1377243216964" ID="ID_634377434" MODIFIED="1377243223666" TEXT="Represented by a Queue of edges"/>
<node CREATED="1377242449624" FOLDED="true" ID="ID_1102822324" MODIFIED="1377276950631" TEXT="Get all the edges in the graph">
<node CREATED="1377242649161" ID="ID_166955669" MODIFIED="1377242656457" TEXT="Iterate through each bag"/>
<node CREATED="1377242660019" ID="ID_1238898616" MODIFIED="1377242680751" TEXT="If either() &lt; other() add it">
<node CREATED="1377242705185" ID="ID_40559328" MODIFIED="1377242712606" TEXT="Thus avoid duplicates"/>
</node>
<node CREATED="1377242724308" ID="ID_1759925818" MODIFIED="1377242800876" TEXT="Also avoid duplicate self-loops"/>
</node>
<node CREATED="1377242765756" ID="ID_1090743806" MODIFIED="1377242773505" TEXT="Insert into a MinPQ"/>
<node CREATED="1377242814765" ID="ID_1513408654" MODIFIED="1377242860775" TEXT="Extract min"/>
<node CREATED="1377242865930" FOLDED="true" ID="ID_1393031296" MODIFIED="1377276955644" TEXT="If (!connected(v,w)">
<node CREATED="1377243007022" ID="ID_1636184856" MODIFIED="1377243070670" TEXT="union(v,w)"/>
<node CREATED="1377243078028" ID="ID_1338307625" MODIFIED="1377243086199" TEXT="Add this edge to mst"/>
<node CREATED="1377243096057" ID="ID_1220083478" MODIFIED="1377243103119" TEXT="Increase the weight of the mst"/>
</node>
</node>
<node CREATED="1377276913172" ID="ID_493963173" MODIFIED="1377276922276" TEXT="a MST not the MST"/>
</node>
</node>
<node CREATED="1377279273805" FOLDED="true" ID="ID_1742472022" MODIFIED="1377595184868" POSITION="right" TEXT="ArrayList">
<node CREATED="1377279293417" ID="ID_308122975" MODIFIED="1377279297308" TEXT="resizing involved"/>
<node CREATED="1377279414419" ID="ID_752670140" MODIFIED="1377279419900" TEXT="amortized analysis"/>
</node>
<node CREATED="1377279270054" FOLDED="true" ID="ID_1462461907" MODIFIED="1377595186836" POSITION="right" TEXT="Arrays">
<node CREATED="1377284973289" FOLDED="true" ID="ID_1928082570" MODIFIED="1377584673401" TEXT="naming">
<node CREATED="1377284983365" ID="ID_580878166" MODIFIED="1377284991557" TEXT="eg: vertices in a graph"/>
<node CREATED="1377284978426" ID="ID_558226852" MODIFIED="1377284982943" TEXT="index becomes the name"/>
</node>
<node CREATED="1377284929050" ID="ID_295338042" MODIFIED="1377284933873" TEXT="indexing"/>
<node CREATED="1377284918836" ID="ID_644653612" MODIFIED="1377284920480" TEXT="swap"/>
<node CREATED="1377509994716" ID="ID_1212048648" MODIFIED="1377584654639" TEXT="algorithms">
<node CREATED="1377284915221" FOLDED="true" ID="ID_519491490" MODIFIED="1377584653857" TEXT="permutations">
<node CREATED="1377584640922" ID="ID_1149263252" MODIFIED="1377584651405" TEXT="see backtracking / string permutation"/>
<node CREATED="1377584599284" ID="ID_1558229639" MODIFIED="1377584639735" TEXT="fix a char. swap, permute, swap"/>
</node>
</node>
</node>
<node CREATED="1377246724968" FOLDED="true" ID="ID_1625886634" MODIFIED="1377595792022" POSITION="right" TEXT="Symbol Tables">
<node CREATED="1377246738575" FOLDED="true" ID="ID_1290754227" MODIFIED="1377281338405" TEXT="TreeMap">
<node CREATED="1377281332548" ID="ID_1151040195" MODIFIED="1377281336242" TEXT="no hashing here"/>
<node CREATED="1377279371052" ID="ID_694729867" MODIFIED="1377279378916" TEXT="balanced search tree"/>
<node CREATED="1377279379409" ID="ID_246880828" MODIFIED="1377279392321" TEXT="red black tree is an option"/>
</node>
<node CREATED="1377279319061" FOLDED="true" ID="ID_1678535259" MODIFIED="1377281321735" TEXT="LinkedHashMap">
<node CREATED="1377281202423" ID="ID_137445329" MODIFIED="1377281219629" TEXT="Implemented with the same hashing "/>
<node CREATED="1377281220862" ID="ID_217480565" MODIFIED="1377281253359" TEXT="each node contains a prev and next"/>
</node>
<node CREATED="1377246730717" FOLDED="true" ID="ID_1453971207" MODIFIED="1377595790210" TEXT="HashMap">
<node CREATED="1377276837546" ID="ID_758522388" MODIFIED="1377276844986" TEXT="lookup, reverse lookup"/>
<node CREATED="1377278554974" ID="ID_928640696" MODIFIED="1377278596197" TEXT="Filling bucket (until size k is reached)"/>
<node CREATED="1377274470810" ID="ID_19056249" MODIFIED="1377274480534" TEXT="To convert from quadratic to linear algo"/>
<node CREATED="1377595202676" FOLDED="true" ID="ID_1913457289" MODIFIED="1377595789695" TEXT="algorithms">
<node CREATED="1377595279575" FOLDED="true" ID="ID_231571323" MODIFIED="1377595447043" TEXT="can the string be permuted to a palindrome">
<node CREATED="1377595306271" ID="ID_14008641" MODIFIED="1377595316408" TEXT="find character frequency"/>
<node CREATED="1377595317049" ID="ID_502990600" MODIFIED="1377595343041" TEXT="if all characters have even freq - yes"/>
<node CREATED="1377595328936" ID="ID_1696650269" MODIFIED="1377595344010" TEXT="if only one character has odd freq - yes"/>
<node CREATED="1377595337808" ID="ID_1341140817" MODIFIED="1377595345447" TEXT="otherwise no"/>
</node>
<node CREATED="1377595481689" FOLDED="true" ID="ID_1848426170" MODIFIED="1377595511665" TEXT="find if duplicates are present">
<node CREATED="1377595497388" ID="ID_1896273656" MODIFIED="1377595507822" TEXT="hash and maintain frequency"/>
</node>
<node CREATED="1377595529519" FOLDED="true" ID="ID_1784596962" MODIFIED="1377595597421" TEXT="pair users by attributes (exact attributes match)">
<node CREATED="1377595554512" ID="ID_1007760568" MODIFIED="1377595559292" TEXT="use hashcode to pair"/>
<node CREATED="1377595569851" ID="ID_329477633" MODIFIED="1377595594875" TEXT="if hastable entry is present, return it as pair"/>
<node CREATED="1377595579833" ID="ID_1589355119" MODIFIED="1377595584831" TEXT="else put"/>
</node>
<node CREATED="1377595206175" FOLDED="true" ID="ID_418632308" MODIFIED="1377595454369" TEXT="print all anagrams of a string">
<node CREATED="1377595235291" ID="ID_1161324995" MODIFIED="1377595259112" TEXT="let sort(string) be the key"/>
<node CREATED="1377595259706" ID="ID_1983886086" MODIFIED="1377595269266" TEXT="value is a list of strings"/>
<node CREATED="1377595269953" ID="ID_681753241" MODIFIED="1377595272983" TEXT="add to the list"/>
</node>
<node CREATED="1377595635426" FOLDED="true" ID="ID_1968687483" MODIFIED="1377595763327" TEXT="compress given trees to canonical form">
<node CREATED="1377595652031" ID="ID_1834492476" MODIFIED="1377595665152" TEXT="generate hashcode based on tree (and all nodes)"/>
<node CREATED="1377595668651" ID="ID_1742999470" MODIFIED="1377595707749" TEXT="for any node as key, store its canonical subtree as child"/>
<node CREATED="1377595727962" ID="ID_1315544598" MODIFIED="1377595745067" TEXT="iterate through actual tree, and replace child with hashmap value"/>
<node CREATED="1377595746254" ID="ID_1710588711" MODIFIED="1377595755173" TEXT="that gives the canoical (compressed) tree"/>
</node>
</node>
</node>
<node CREATED="1377246764197" FOLDED="true" ID="ID_615998061" MODIFIED="1377274461446" TEXT="Trie">
<node CREATED="1377260070212" FOLDED="true" ID="ID_798900648" MODIFIED="1377260182776" TEXT="Data in a trie is implicit">
<node CREATED="1377260083961" ID="ID_371775400" MODIFIED="1377260114316">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Check the array position
    </p>
    <p>
      corresponding to the character
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1377260116160" ID="ID_533066371" MODIFIED="1377260153795">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      If a node is present that
    </p>
    <p>
      is present in the symbol table
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1377260154827" ID="ID_314956235" MODIFIED="1377260162591" TEXT="If not, it is not present in the ST"/>
<node CREATED="1377260173387" ID="ID_830311395" MODIFIED="1377260181932" TEXT="Only the value is explicit"/>
</node>
<node CREATED="1377258703075" FOLDED="true" ID="ID_1974344913" MODIFIED="1377260068025" TEXT="OuterClass">
<node CREATED="1377258717089" ID="ID_807805730" MODIFIED="1377258730071" TEXT="TrieST&lt;Value&gt;"/>
<node CREATED="1377259313919" ID="ID_32921397" MODIFIED="1377259317340" TEXT="Contains root node"/>
<node CREATED="1377258737789" ID="ID_673851588" MODIFIED="1377258743414" TEXT="Contains common properties"/>
<node CREATED="1377258747460" ID="ID_1278834157" MODIFIED="1377259028502" TEXT="R=256 (radix, breadth of each node)"/>
<node CREATED="1377259068716" FOLDED="true" ID="ID_466385319" MODIFIED="1377260049824" TEXT="Contains all the public methods">
<node CREATED="1377247705967" ID="ID_396297363" MODIFIED="1377259757127" TEXT="put">
<node CREATED="1377247790191" ID="ID_1248503840" MODIFIED="1377259508300" TEXT="public method takes key,value,"/>
<node CREATED="1377247711779" ID="ID_1138499141" MODIFIED="1377259536781">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      public method takes node, key, value, position and recursively
    </p>
    <p>
      populates children
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1377259851522" ID="ID_1354856942" MODIFIED="1377260047153">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      At the passed in (or created) node, at the corresponding position
    </p>
    <p>
      in the node array, insert the children
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1377247949202" ID="ID_1090701957" MODIFIED="1377248136443" TEXT="if node m is null, create a node"/>
<node CREATED="1377247941078" ID="ID_773307715" MODIFIED="1377248143271" TEXT="if node m is not null, use it"/>
<node CREATED="1377247975323" ID="ID_1669814823" MODIFIED="1377248481930" TEXT="if position==key.length, insert the value, and return">
<node CREATED="1377248483946" ID="ID_930070256" MODIFIED="1377248492491" TEXT="forms the base case"/>
<node CREATED="1377248494585" ID="ID_525215995" MODIFIED="1377248507068" TEXT="for next character recursive put"/>
</node>
<node CREATED="1377248023692" ID="ID_15443711" MODIFIED="1377248068405" TEXT="find c= key.charAt(position)"/>
<node CREATED="1377248069702" ID="ID_873226062" MODIFIED="1377248429343" TEXT="for node[c]">
<node CREATED="1377248084981" ID="ID_1869377216" MODIFIED="1377248437936" TEXT="set with m"/>
<node CREATED="1377248161299" ID="ID_888935772" MODIFIED="1377248456855" TEXT="but before that populate m.next[c] with the next digit, recursively"/>
</node>
<node CREATED="1377247860916" ID="ID_243834741" MODIFIED="1377248592416" TEXT="it returns the same node it takes (m) / the newly created node">
<node CREATED="1377248629583" ID="ID_1233517795" MODIFIED="1377248639113" TEXT="with child nodes populated"/>
</node>
</node>
</node>
</node>
<node CREATED="1377258709152" FOLDED="true" ID="ID_174459196" MODIFIED="1377259841992" TEXT="Nested Class">
<node CREATED="1377258817482" ID="ID_244735322" MODIFIED="1377259399486" TEXT="Node">
<node CREATED="1377258833871" ID="ID_1236119150" MODIFIED="1377258838573" TEXT="Object val"/>
<node CREATED="1377258844010" ID="ID_1488706995" MODIFIED="1377259367880" TEXT="Node[] next = new Node[R]"/>
</node>
</node>
<node CREATED="1377274422531" ID="ID_1183702226" MODIFIED="1377274447140" TEXT="Find all elments in dictionary starting with"/>
</node>
</node>
<node CREATED="1377273447455" FOLDED="true" ID="ID_1569171189" MODIFIED="1377285146170" POSITION="right" TEXT="Queue">
<node CREATED="1377276659730" FOLDED="true" ID="ID_201207004" MODIFIED="1377276695777" TEXT="implementation">
<node CREATED="1377275302435" ID="ID_495488903" MODIFIED="1377276680186" TEXT="using LL with front and tail refs"/>
<node CREATED="1377276568064" ID="ID_512407506" MODIFIED="1377276688750" TEXT="using an array"/>
<node CREATED="1377275281418" ID="ID_496397313" MODIFIED="1377276694350" TEXT="using two stacks"/>
</node>
<node CREATED="1377273583533" ID="ID_681858812" MODIFIED="1377273620181" TEXT="fixed size queue for LRU (replacement policy )"/>
<node CREATED="1377275259022" ID="ID_582564966" MODIFIED="1377275261931" TEXT="algorithms">
<node CREATED="1377273457458" ID="ID_207966472" MODIFIED="1377273462789" TEXT="breadth first search"/>
<node CREATED="1377273463189" ID="ID_397238088" MODIFIED="1377273466970" TEXT="level order traversal"/>
</node>
</node>
<node CREATED="1377278607468" FOLDED="true" ID="ID_179400973" MODIFIED="1377328633859" POSITION="right" TEXT="Bloom filter">
<node CREATED="1377278617462" ID="ID_1093301287" MODIFIED="1377278640493" TEXT="was it ever inserted ?"/>
<node CREATED="1377278631776" ID="ID_399212024" MODIFIED="1377278635116" TEXT="space effecient"/>
<node CREATED="1377278642564" ID="ID_752042731" MODIFIED="1377278660328" TEXT="might say inserted, even when not inserted"/>
<node CREATED="1377278625718" ID="ID_1758613490" MODIFIED="1377278631185" TEXT="the whole object is not stored"/>
<node CREATED="1377278662234" ID="ID_761586010" MODIFIED="1377278666083" TEXT="spell checker"/>
<node CREATED="1377278688816" ID="ID_497060543" MODIFIED="1377278696524" TEXT="invalid passwords list"/>
<node CREATED="1377278667336" ID="ID_17304945" MODIFIED="1377278673964" TEXT="ip addresses to block"/>
</node>
<node CREATED="1377273203786" FOLDED="true" ID="ID_1036030059" MODIFIED="1377285153163" POSITION="right" TEXT="Union Find">
<node CREATED="1377273339128" ID="ID_216140207" MODIFIED="1377273345804" TEXT="Connect "/>
<node CREATED="1377273330076" ID="ID_977104793" MODIFIED="1377273338621" TEXT="Connected or Not"/>
<node CREATED="1377274626856" ID="ID_1916601965" MODIFIED="1377274637655" TEXT="building mst "/>
<node CREATED="1377274617106" ID="ID_1147388409" MODIFIED="1377274623729" TEXT="find cycle in graphs"/>
<node CREATED="1377273348794" ID="ID_1583770156" MODIFIED="1377273360858" TEXT="Way better than graph traversal"/>
</node>
<node CREATED="1377281149419" FOLDED="true" ID="ID_1104332314" MODIFIED="1377328640112" POSITION="right" TEXT="BitVector">
<node CREATED="1377281165443" ID="ID_129998080" MODIFIED="1377281170586" TEXT="set or not set"/>
<node CREATED="1377281160327" ID="ID_510567544" MODIFIED="1377281164791" TEXT="boolean array"/>
<node CREATED="1377281155170" ID="ID_1514879642" MODIFIED="1377281159811" TEXT="space effecient"/>
</node>
<node CREATED="1377273159434" FOLDED="true" ID="ID_1932034026" MODIFIED="1377599226144" POSITION="right" TEXT="Heap / PQ">
<node CREATED="1377427162613" FOLDED="true" ID="ID_1891419647" MODIFIED="1377599221993" TEXT="algorithms">
<node CREATED="1377273233134" ID="ID_967102540" MODIFIED="1377284836924" TEXT="online median"/>
<node CREATED="1377273281431" ID="ID_183497980" MODIFIED="1377273311198" TEXT="LRU cache (replacement policy)"/>
<node CREATED="1377598118220" FOLDED="true" ID="ID_1432052556" MODIFIED="1377599216906" TEXT="merge k sorted arrays">
<node CREATED="1377598417384" FOLDED="true" ID="ID_1579450834" MODIFIED="1377598471314" TEXT="minPQ entries are pairs">
<node CREATED="1377598423933" ID="ID_1424817177" MODIFIED="1377598465948" TEXT="sourceArray, denotes which array the elt belongs to"/>
<node CREATED="1377598457579" ID="ID_360940004" MODIFIED="1377598461623" TEXT="value"/>
</node>
<node CREATED="1377598379181" FOLDED="true" ID="ID_1238060597" MODIFIED="1377599210866" TEXT="maintain k sized array">
<node CREATED="1377598384920" ID="ID_311599131" MODIFIED="1377598397847" TEXT="contains the current index of k arrays"/>
</node>
<node CREATED="1377598144983" ID="ID_128386670" MODIFIED="1377598156223" TEXT="insert first item from each array to minPQ"/>
<node CREATED="1377598223139" FOLDED="true" ID="ID_285628403" MODIFIED="1377598268381" TEXT="insert next item from the corresponding array">
<node CREATED="1377598244753" ID="ID_392699184" MODIFIED="1377598258628" TEXT="if size exhausted, ignore"/>
</node>
<node CREATED="1377598156950" ID="ID_379977720" MODIFIED="1377598166505" TEXT="del from minPQ and display"/>
</node>
<node CREATED="1377273209595" ID="ID_249682818" MODIFIED="1377284825533" TEXT="biggest 10 elements from a stream"/>
<node CREATED="1377284803740" ID="ID_7552207" MODIFIED="1377284816526" TEXT="k closest elements"/>
<node CREATED="1377278178302" ID="ID_1755139960" MODIFIED="1377284820185" TEXT="sort"/>
</node>
<node CREATED="1377427152940" ID="ID_887148461" MODIFIED="1377427179609" TEXT="MinPQ"/>
<node CREATED="1377427156426" FOLDED="true" ID="ID_209046592" MODIFIED="1377428274817" TEXT="IndexedMinPQ">
<node CREATED="1377427496371" ID="ID_1971016778" MODIFIED="1377427505673" TEXT="pq[] holds the acual elements"/>
<node CREATED="1377427506256" ID="ID_1736271797" MODIFIED="1377427517627" TEXT="key[] holds the priority value"/>
</node>
</node>
<node CREATED="1377273449464" FOLDED="true" ID="ID_449875052" MODIFIED="1377584692102" POSITION="right" TEXT="Stack">
<node CREATED="1377276719466" ID="ID_191598808" MODIFIED="1377276722710" TEXT="implementation">
<node CREATED="1377276732324" ID="ID_673204782" MODIFIED="1377276744039" TEXT="using  LL with top"/>
<node CREATED="1377276628894" ID="ID_1818721953" MODIFIED="1377276730884" TEXT="using array"/>
</node>
<node CREATED="1377274510840" FOLDED="true" ID="ID_1384026219" MODIFIED="1377328583527" TEXT="algorithms">
<node CREATED="1377274533062" ID="ID_1313857157" MODIFIED="1377274537954" TEXT="tower of hanoi"/>
<node CREATED="1377274521860" ID="ID_1647937714" MODIFIED="1377274532181" TEXT="zig zag traversal of binary tree"/>
<node CREATED="1377274572144" ID="ID_1544408153" MODIFIED="1377274588820" TEXT="correct paranthesis check"/>
<node CREATED="1377274539852" ID="ID_1707768750" MODIFIED="1377274567202" TEXT="iterative traversal of binary tree"/>
<node CREATED="1377274591085" ID="ID_86183189" MODIFIED="1377274598066" TEXT="palindrome or not"/>
<node CREATED="1377275402936" ID="ID_1139937600" MODIFIED="1377275407171" TEXT="reversing"/>
<node CREATED="1377276809097" ID="ID_1897478757" MODIFIED="1377276819594" TEXT="find min element with O(1)"/>
</node>
</node>
<node CREATED="1377273452013" FOLDED="true" ID="ID_1904732798" MODIFIED="1377599281997" POSITION="right" TEXT="LinkedList">
<node CREATED="1377273674279" ID="ID_516967908" MODIFIED="1377275340185" TEXT="Form chains for other data-structures"/>
<node CREATED="1377273716373" ID="ID_1996684475" MODIFIED="1377273738698" TEXT="separate chaining (hashmap collission resolution)"/>
<node CREATED="1377273688629" ID="ID_1426530262" MODIFIED="1377273709574" TEXT="binary tree built with sorted input becomes a LL"/>
<node CREATED="1377337699448" FOLDED="true" ID="ID_12410871" MODIFIED="1377337822976" TEXT="some operations won&apos;t work in java (lack of ptrs)">
<node CREATED="1377337767929" ID="ID_535714317" MODIFIED="1377337814308" TEXT="so draw diagrams and check"/>
<node CREATED="1377337784907" ID="ID_826461926" MODIFIED="1377337797370" TEXT="return and assign "/>
<node CREATED="1377337798280" ID="ID_959971980" MODIFIED="1377337810584" TEXT="don&apos;t attempt to modify the passed object"/>
</node>
<node CREATED="1377273816721" FOLDED="true" ID="ID_1928128411" MODIFIED="1377599279766" TEXT="algorithms">
<node CREATED="1377273828459" FOLDED="true" ID="ID_779361689" MODIFIED="1377508345034" TEXT="reverse">
<node CREATED="1377506501225" FOLDED="true" ID="ID_627145115" MODIFIED="1377508343613" TEXT="recursive">
<node CREATED="1377507685668" ID="ID_1383024684" MODIFIED="1377507723969" TEXT="what if the list had one entry ? return list"/>
<node CREATED="1377507671922" ID="ID_1155548941" MODIFIED="1377507737731" TEXT="what is the reverse of empty list ? return null"/>
<node CREATED="1377507941202" FOLDED="true" ID="ID_1775748758" MODIFIED="1377508331150" TEXT="what is the reverse of n element list ?">
<node CREATED="1377507952369" ID="ID_1221935638" MODIFIED="1377507966597" TEXT="rev(secondElement) followed by first element"/>
<node CREATED="1377507971002" ID="ID_1943470827" MODIFIED="1377508286828" TEXT="to find this: note the second element (list.next)">
<icon BUILTIN="full-1"/>
</node>
<node CREATED="1377507998834" ID="ID_1249473638" MODIFIED="1377508305459" TEXT="unlink now: list.next=null (to avoid cycles)">
<icon BUILTIN="full-2"/>
</node>
<node CREATED="1377508022745" ID="ID_27181028" MODIFIED="1377508308708" TEXT="now reverse second list: reverseRest= rev(secondElem)">
<icon BUILTIN="full-3"/>
</node>
<node CREATED="1377508043127" ID="ID_132328162" MODIFIED="1377508311753" TEXT="secondElem.next=first">
<icon BUILTIN="full-4"/>
</node>
</node>
</node>
<node CREATED="1377505042951" FOLDED="true" ID="ID_721376436" MODIFIED="1377505852334" TEXT="iterative">
<node CREATED="1377505046262" ID="ID_1842550879" MODIFIED="1377505360010" TEXT="maintain 4 references"/>
<node CREATED="1377505052618" ID="ID_1533592719" MODIFIED="1377505166163" TEXT="current, prev,next, reversedHead"/>
<node CREATED="1377505783078" FOLDED="true" ID="ID_1843463196" MODIFIED="1377505850569" TEXT="how to find the reversedHead">
<node CREATED="1377505825032" ID="ID_52269678" MODIFIED="1377505841635" TEXT="after iteration, prev holds the reversedHead">
<icon BUILTIN="idea"/>
</node>
<node CREATED="1377505196463" ID="ID_1207561017" MODIFIED="1377505821658">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      if next is null during iteration
    </p>
    <p>
      note it as reversedHead
    </p>
  </body>
</html></richcontent>
<icon BUILTIN="idea"/>
</node>
</node>
<node CREATED="1377505075544" ID="ID_401102755" MODIFIED="1377505195931" TEXT="init everything except current to null"/>
<node CREATED="1377505292780" ID="ID_601287321" MODIFIED="1377505559495">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      run the whole thing in while loop
    </p>
    <p>
      when current is not null
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1377505214525" ID="ID_905665934" MODIFIED="1377505276970">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      next=current.next<br />current.next=prev
    </p>
    <p>
      prev=current
    </p>
    <p>
      current=next
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1377505311281" ID="ID_330154969" MODIFIED="1377505326716" TEXT="return reversedHead after the loop ends"/>
</node>
</node>
<node CREATED="1377273834336" FOLDED="true" ID="ID_1493069427" MODIFIED="1377509732168" TEXT="find if palindrome">
<node CREATED="1377508465930" FOLDED="true" ID="ID_1831992346" MODIFIED="1377509577388" TEXT="reverse the list approach">
<node CREATED="1377508479938" FOLDED="true" ID="ID_379762452" MODIFIED="1377509132414" TEXT="find the mid of the list">
<node CREATED="1377508871950" ID="ID_1998133817" MODIFIED="1377508935653">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      for odd we don't want&#160;
    </p>
    <p>
      the mid number in any list
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1377508900092" ID="ID_912518985" MODIFIED="1377509077254">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      achieved by ending at&#160;<br />fastPtr==null || fastPtr.next==null
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1377509098103" ID="ID_364924301" MODIFIED="1377509108239" TEXT="if fastPtr was present : odd length"/>
<node CREATED="1377509115704" ID="ID_1646133733" MODIFIED="1377509130540" TEXT="if odd length note the mid element"/>
<node CREATED="1377509080066" ID="ID_854579285" MODIFIED="1377509114611" TEXT="if fastPtr was null at end : even length"/>
</node>
<node CREATED="1377509135413" ID="ID_1688947685" MODIFIED="1377509266145" TEXT="note the two sections"/>
<node CREATED="1377509329689" ID="ID_1740207540" MODIFIED="1377509334585" TEXT="1 2 3 3 2 1"/>
<node CREATED="1377509344018" ID="ID_548704067" MODIFIED="1377509353733" TEXT="unlink after the first half"/>
<node CREATED="1377509359580" ID="ID_1647354598" MODIFIED="1377509504109" TEXT="now we have two lists"/>
<node CREATED="1377509354419" ID="ID_234485047" MODIFIED="1377509358613" TEXT="reverse the first half"/>
<node CREATED="1377509366316" ID="ID_1808288970" MODIFIED="1377509507118" TEXT="compare the lists and check"/>
<node CREATED="1377509375048" FOLDED="true" ID="ID_1652734307" MODIFIED="1377509575359" TEXT="finally revert the change">
<node CREATED="1377509404268" FOLDED="true" ID="ID_617586802" MODIFIED="1377509574110" TEXT="append">
<node CREATED="1377509420391" ID="ID_1120782504" MODIFIED="1377509571472" TEXT="attach first with midNode if midNode was present"/>
<node CREATED="1377509428546" ID="ID_1269428353" MODIFIED="1377509435282" TEXT="or else attach with second list"/>
</node>
<node CREATED="1377509388582" ID="ID_260801939" MODIFIED="1377509403816" TEXT="reverse the first half again"/>
</node>
</node>
<node CREATED="1377508397494" FOLDED="true" ID="ID_980183547" MODIFIED="1377508478705" TEXT="simple: use stack">
<node CREATED="1377508403116" ID="ID_1284159603" MODIFIED="1377508410738" TEXT="pass 1: iterate and add to stack"/>
<node CREATED="1377508411222" ID="ID_281698405" MODIFIED="1377508424747" TEXT="pass 2: compre stack.pop with traversed"/>
<node CREATED="1377508425559" ID="ID_93948426" MODIFIED="1377508454217" TEXT="if any node doesn&apos;t match, false"/>
</node>
</node>
<node CREATED="1377273846779" ID="ID_723300387" MODIFIED="1377273858995" TEXT="interleave"/>
<node CREATED="1377273863611" ID="ID_1888651356" MODIFIED="1377273871779" TEXT="start of a cycle"/>
<node CREATED="1377273873254" ID="ID_3739458" MODIFIED="1377273883860" TEXT="length of a loop"/>
<node CREATED="1377273892269" ID="ID_1386432321" MODIFIED="1377273903726" TEXT="length of a LL with loop"/>
<node CREATED="1377273904747" ID="ID_891701613" MODIFIED="1377273917234" TEXT="median of a LL with loop"/>
<node CREATED="1377273918252" ID="ID_1649869184" MODIFIED="1377273925785" TEXT="intersection of 2 LL"/>
<node CREATED="1377333217318" FOLDED="true" ID="ID_1926744749" MODIFIED="1377506628721" TEXT="append a LL to another">
<node CREATED="1377333229999" ID="ID_1340611386" MODIFIED="1377333237302" TEXT="if list1 is empty return list2"/>
<node CREATED="1377333243196" ID="ID_538033608" MODIFIED="1377333260866" TEXT="else find list1&apos;s tail and append"/>
</node>
<node CREATED="1377334325197" FOLDED="true" ID="ID_1932331146" MODIFIED="1377337756441" TEXT="MoveNode">
<node CREATED="1377334328892" ID="ID_721894277" MODIFIED="1377334384951" TEXT="Moves the head from list2 and pushes as list1 head"/>
<node CREATED="1377334615516" ID="ID_1595160945" MODIFIED="1377334653116" TEXT="Note the list2&apos;s head as the nodeToMove"/>
<node CREATED="1377334636565" ID="ID_1868745151" MODIFIED="1377334654223" TEXT="Move the list2&apos;s head by 1 step"/>
<node CREATED="1377334748260" ID="ID_1248363002" MODIFIED="1377334764424" TEXT="Mark nodeToMove.next to list1&apos;s head"/>
<node CREATED="1377335119597" ID="ID_1312409406" MODIFIED="1377335134656" TEXT="So you&apos;ve got a node even if list1&apos;s head=null"/>
<node CREATED="1377334767076" ID="ID_1008223352" MODIFIED="1377334773938" TEXT="Return the two new heads"/>
</node>
<node CREATED="1377333349304" FOLDED="true" ID="ID_1250999120" MODIFIED="1377509584505" TEXT="fron back split">
<node CREATED="1377333364777" ID="ID_131127048" MODIFIED="1377333679220" TEXT="split {2,3,5,7,11} to {2,3,5} and {7,11}"/>
<node CREATED="1377333662030" ID="ID_642549317" MODIFIED="1377333676226" TEXT="problem is to find the mid node and split"/>
<node CREATED="1377333680268" ID="ID_54794565" MODIFIED="1377333689788" TEXT="use slow ptr, fast ptr approach"/>
<node CREATED="1377333690707" ID="ID_77860375" MODIFIED="1377333721848" TEXT="note the mid.next as second list head"/>
<node CREATED="1377333723186" ID="ID_732251281" MODIFIED="1377333730951" TEXT="return the two heads"/>
</node>
<node CREATED="1377276426144" FOLDED="true" ID="ID_1382150843" MODIFIED="1377337674162" TEXT="alternating split">
<node CREATED="1377335670755" FOLDED="true" ID="ID_503156226" MODIFIED="1377337520947" TEXT="without dummy">
<node CREATED="1377334961419" ID="ID_1487241436" MODIFIED="1377335561951" TEXT="list:{a,b,a,b,a} to one:{a,a,a} and two:{b,b}"/>
<node CREATED="1377335201225" ID="ID_1030339070" MODIFIED="1377335475005" TEXT="create two new lists"/>
<node CREATED="1377335538087" ID="ID_941679590" MODIFIED="1377335565121" TEXT="current iterates through list"/>
<node CREATED="1377335483083" ID="ID_4497976" MODIFIED="1377335490463" TEXT="provided current is not empty"/>
<node CREATED="1377335417400" ID="ID_853607037" MODIFIED="1377335472195" TEXT="MoveNode(one,current)"/>
<node CREATED="1377335434910" ID="ID_712663615" MODIFIED="1377335440598" TEXT="MoveNode(two,current)"/>
<node CREATED="1377335622340" ID="ID_1481092069" MODIFIED="1377335633128" TEXT="each time, one and two point to new heads"/>
<node CREATED="1377335584849" ID="ID_1539453361" MODIFIED="1377335652713" TEXT="On end,the two lists are in reversed order"/>
</node>
<node CREATED="1377335666172" FOLDED="true" ID="ID_251410020" MODIFIED="1377337520187" TEXT="with dummy">
<node CREATED="1377335994789" ID="ID_74372978" MODIFIED="1377336002394" TEXT="maintain aTail and bTail"/>
<node CREATED="1377336002913" ID="ID_1091307759" MODIFIED="1377336011855" TEXT="initialize them both with dummy nodes"/>
<node CREATED="1377336014922" ID="ID_718784781" MODIFIED="1377336023300" TEXT="traverse list with &apos;current&apos;"/>
<node CREATED="1377336039639" ID="ID_344002755" MODIFIED="1377336085825" TEXT="push it to aTail.next, bTail.next alternatively"/>
<node CREATED="1377336088105" ID="ID_859655353" MODIFIED="1377337517870" TEXT="have got the two lists in correct order now"/>
</node>
</node>
<node CREATED="1377273930517" ID="ID_1289282023" MODIFIED="1377273935241" TEXT="merge two LL"/>
<node CREATED="1377273947523" FOLDED="true" ID="ID_1876454746" MODIFIED="1377333192412" TEXT="Sort">
<node CREATED="1377332774777" ID="ID_28153149" MODIFIED="1377332777797" TEXT="insertion sort">
<node CREATED="1377332779058" FOLDED="true" ID="ID_1010226093" MODIFIED="1377332992985" TEXT="SortedInsert">
<node CREATED="1377332834535" ID="ID_513358900" MODIFIED="1377332848505" TEXT="Method1:">
<node CREATED="1377332854559" ID="ID_102167857" MODIFIED="1377332922055" TEXT="if passed in head is null, create &#xa;new node and return as head"/>
<node CREATED="1377332924617" ID="ID_1076445414" MODIFIED="1377332945377" TEXT="else locate the position and insert"/>
</node>
<node CREATED="1377332849538" ID="ID_13872371" MODIFIED="1377332853095" TEXT="Method2:">
<node CREATED="1377332957332" ID="ID_311471609" MODIFIED="1377332971885" TEXT="create a dummy node and note it as head"/>
<node CREATED="1377332972925" ID="ID_1263141950" MODIFIED="1377332983745" TEXT="insert the node in the correct position"/>
<node CREATED="1377332984676" ID="ID_52591358" MODIFIED="1377332991134" TEXT="return dummy.next as head"/>
</node>
</node>
<node CREATED="1377333006383" ID="ID_786222786" MODIFIED="1377333077178" TEXT="start with empty list"/>
<node CREATED="1377333046824" ID="ID_671216334" MODIFIED="1377333078383" TEXT="iterate through source list"/>
<node CREATED="1377333052585" ID="ID_226299929" MODIFIED="1377333081424" TEXT="for each item, do sorted insert to result list"/>
</node>
<node CREATED="1377332770775" ID="ID_1991501299" MODIFIED="1377332774332" TEXT="mergesort"/>
</node>
<node CREATED="1377274141459" ID="ID_1425160228" MODIFIED="1377274164304" TEXT="arbitrary pointer, next pointer (clone)"/>
<node CREATED="1377273995126" ID="ID_784926570" MODIFIED="1377274000764" TEXT="add two numbers"/>
<node CREATED="1377276502549" ID="ID_1479462220" MODIFIED="1377276510897" TEXT="linked list with child to normal linked list"/>
<node CREATED="1377274208839" ID="ID_1340449261" MODIFIED="1377274222367" TEXT="doubly linked list to binary tree"/>
<node CREATED="1377325666074" FOLDED="true" ID="ID_324796378" MODIFIED="1377328204711" TEXT="delete a node">
<node CREATED="1377325812324" FOLDED="true" ID="ID_170645033" MODIFIED="1377325842777" TEXT="if the node is head">
<node CREATED="1377325824256" ID="ID_1648544901" MODIFIED="1377325839891" TEXT="return back null"/>
</node>
<node CREATED="1377325844429" ID="ID_717299918" MODIFIED="1377325860420" TEXT="if the head and the node is given"/>
<node CREATED="1377325673524" FOLDED="true" ID="ID_344516174" MODIFIED="1377325809831" TEXT="if the node alone is given">
<node CREATED="1377325778607" ID="ID_1940686541" MODIFIED="1377325804867" TEXT="remove move that next pointer&#xa;to this next pointer"/>
<node CREATED="1377325718514" ID="ID_1339661837" MODIFIED="1377325769106" TEXT="move that data to this node"/>
<node CREATED="1377325706958" ID="ID_1743668640" MODIFIED="1377325717150" TEXT="if it has a next node"/>
</node>
</node>
<node CREATED="1377276408309" FOLDED="true" ID="ID_745651995" MODIFIED="1377328567840" TEXT="push">
<node CREATED="1377328482033" ID="ID_961535782" MODIFIED="1377328491110" TEXT="create a LL without special cases">
<node CREATED="1377328500170" ID="ID_1413422700" MODIFIED="1377328504863" TEXT="use a dummy node first"/>
<node CREATED="1377328505626" ID="ID_1024537579" MODIFIED="1377328511334" TEXT="always push at tail"/>
<node CREATED="1377328513052" ID="ID_1888311018" MODIFIED="1377328522448" TEXT="finally return dummy.next"/>
</node>
<node CREATED="1377328458018" ID="ID_1208307236" MODIFIED="1377328466739" TEXT="create a LL by pushing">
<node CREATED="1377325338100" FOLDED="true" ID="ID_1472764293" MODIFIED="1377328542755" TEXT="case1: push a new node to head">
<node CREATED="1377325352171" ID="ID_708942820" MODIFIED="1377325365736" TEXT="head pointer is given"/>
<node CREATED="1377325389018" ID="ID_1864216716" MODIFIED="1377325393999" TEXT="create the new node"/>
<node CREATED="1377325395230" ID="ID_1644504475" MODIFIED="1377325405086" TEXT="set its next ptr to head"/>
<node CREATED="1377325406308" ID="ID_112520243" MODIFIED="1377325412100" TEXT="make the new node the head"/>
</node>
<node CREATED="1377328232103" FOLDED="true" ID="ID_375338460" MODIFIED="1377328557380" TEXT="case2: push other new nodes to tail">
<node CREATED="1377328288350" ID="ID_986545465" MODIFIED="1377328294321" TEXT="push to tail.next"/>
<node CREATED="1377328302342" ID="ID_334801252" MODIFIED="1377328311201" TEXT="change the old tail to point here"/>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1377257326907" FOLDED="true" ID="ID_1141090932" MODIFIED="1377599272712" POSITION="right" TEXT="Trees">
<node CREATED="1377257335438" FOLDED="true" ID="ID_137414095" MODIFIED="1377595832995" TEXT="btree">
<node CREATED="1377258601525" ID="ID_112536735" MODIFIED="1377258604900" TEXT="made up of"/>
<node CREATED="1377258202155" FOLDED="true" ID="ID_1411564271" MODIFIED="1377259088322" TEXT="Outer Class">
<node CREATED="1377258616727" ID="ID_1306008097" MODIFIED="1377258655487" TEXT="BTree&lt;Key extends Comparable&lt;Key&gt;, Value&gt;"/>
<node CREATED="1377258226370" ID="ID_21273532" MODIFIED="1377258234838" TEXT="Contains overall, common properties"/>
<node CREATED="1377257587437" ID="ID_1933416493" MODIFIED="1377258129320" TEXT="M (max children per BTree node)"/>
<node CREATED="1377257455375" ID="ID_491919078" MODIFIED="1377257463812" TEXT="N (number of key value pairs)"/>
<node CREATED="1377257435347" ID="ID_777506833" MODIFIED="1377257445939" TEXT="HT (height)"/>
<node CREATED="1377258254226" ID="ID_635468346" MODIFIED="1377258257507" TEXT="Node root"/>
<node CREATED="1377259081855" ID="ID_102880255" MODIFIED="1377259087026" TEXT="Contains all the public methods"/>
</node>
<node CREATED="1377258206873" FOLDED="true" ID="ID_305074589" MODIFIED="1377259107492" TEXT="Nested Class">
<node CREATED="1377259096775" ID="ID_1017252781" MODIFIED="1377259105805" TEXT="These classes act as helpers"/>
<node CREATED="1377257428332" ID="ID_1961018312" MODIFIED="1377257489215" TEXT="Node">
<node CREATED="1377258048924" ID="ID_972191285" MODIFIED="1377258070515" TEXT="Conceptually two types">
<node CREATED="1377258053143" ID="ID_1188224755" MODIFIED="1377258056939" TEXT="Internal nodes">
<node CREATED="1377258072749" ID="ID_1857396368" MODIFIED="1377258088091" TEXT="use only key and next fields"/>
</node>
<node CREATED="1377258057345" ID="ID_1159591137" MODIFIED="1377258062844" TEXT="External nodes">
<node CREATED="1377258089732" ID="ID_278790951" MODIFIED="1377258097699" TEXT="use only key and value fields"/>
</node>
</node>
<node CREATED="1377257514133" ID="ID_357711430" MODIFIED="1377257645288" STYLE="fork" TEXT="Entry[M] children"/>
<node CREATED="1377257501682" ID="ID_1645286916" MODIFIED="1377257507853" TEXT="numberOfChildren"/>
</node>
<node CREATED="1377258325061" ID="ID_1262160588" MODIFIED="1377258361790" TEXT="Entry">
<node CREATED="1377257545004" ID="ID_1548204159" MODIFIED="1377258011210" TEXT="Node next"/>
<node CREATED="1377257539927" ID="ID_1956953729" MODIFIED="1377258011210" TEXT="key">
<node CREATED="1377257712624" ID="ID_1284831987" MODIFIED="1377257715358" TEXT="Templated"/>
<node CREATED="1377257677972" ID="ID_39446157" MODIFIED="1377257681456" TEXT="Comparable"/>
</node>
<node CREATED="1377257542020" ID="ID_480546727" MODIFIED="1377258010789" TEXT="value">
<node CREATED="1377257716779" ID="ID_1617919734" MODIFIED="1377257718513" TEXT="Templated"/>
<node CREATED="1377257683659" ID="ID_1051505686" MODIFIED="1377257686377" TEXT="Object"/>
</node>
</node>
</node>
<node CREATED="1377273078174" ID="ID_538146470" MODIFIED="1377273096682" TEXT="an external datastructure"/>
</node>
<node CREATED="1377272004623" FOLDED="true" ID="ID_1004265798" MODIFIED="1377595828278" TEXT="bst">
<node CREATED="1377272887919" FOLDED="true" ID="ID_669631562" MODIFIED="1377273065324" TEXT="find">
<node CREATED="1377272894060" ID="ID_997954051" MODIFIED="1377272899145" TEXT="next bigger element"/>
<node CREATED="1377273049641" ID="ID_595964207" MODIFIED="1377273063298" TEXT="value (in symbol table representation)"/>
<node CREATED="1377272890776" ID="ID_1896018644" MODIFIED="1377272893568" TEXT="an element"/>
</node>
<node CREATED="1377272918295" ID="ID_337339603" MODIFIED="1377272922295" TEXT="serialize"/>
<node CREATED="1377278196326" ID="ID_930045165" MODIFIED="1377278198233" TEXT="sort"/>
<node CREATED="1377272827533" ID="ID_9577314" MODIFIED="1377273019763" TEXT="construct">
<node CREATED="1377272854331" ID="ID_919919857" MODIFIED="1377272858520" TEXT="from sorted linked list"/>
<node CREATED="1377272868645" ID="ID_1569731191" MODIFIED="1377272885586" TEXT="from preorder or postorder traversal"/>
<node CREATED="1377273028649" ID="ID_1130090540" MODIFIED="1377273034864" TEXT="from un sorted array"/>
<node CREATED="1377272850537" ID="ID_1210713327" MODIFIED="1377272853755" TEXT="from sorted array"/>
</node>
<node CREATED="1377274365643" ID="ID_240267884" MODIFIED="1377274373905" TEXT="is BST or not"/>
</node>
<node CREATED="1377273626021" ID="ID_1417834382" MODIFIED="1377595824248" TEXT="red black tree"/>
<node CREATED="1377273408649" ID="ID_1077126481" MODIFIED="1377595814001" TEXT="trie"/>
<node CREATED="1377271998300" FOLDED="true" ID="ID_411083838" MODIFIED="1377598104274" TEXT="generic binary tree">
<node CREATED="1377587395865" ID="ID_376329607" MODIFIED="1377587399895" TEXT="why inorder ?">
<node CREATED="1377587400754" ID="ID_217709551" MODIFIED="1377587405908" TEXT="sorted order in BST"/>
</node>
<node CREATED="1377587372141" ID="ID_238868555" MODIFIED="1377587381965" TEXT="why post order ?">
<node CREATED="1377587382902" ID="ID_819935881" MODIFIED="1377587387728" TEXT="tree deletion"/>
</node>
<node CREATED="1377274251750" FOLDED="true" ID="ID_393000988" MODIFIED="1377598103841" TEXT="algorithms">
<node CREATED="1377272755208" FOLDED="true" ID="ID_1657881118" MODIFIED="1377597975436" TEXT="reconstruct">
<node CREATED="1377272780681" ID="ID_1004455859" MODIFIED="1377272792101" TEXT="from inorder and another traversal"/>
<node CREATED="1377272775572" ID="ID_1919168690" MODIFIED="1377272779533" TEXT="from deserialized"/>
</node>
<node CREATED="1377272748594" ID="ID_151132448" MODIFIED="1377272751773" TEXT="serialize"/>
<node CREATED="1377272799420" FOLDED="true" ID="ID_1128874325" MODIFIED="1377596248096" TEXT="find">
<node CREATED="1377272808288" ID="ID_286274125" MODIFIED="1377272812950" TEXT="inorder successor"/>
<node CREATED="1377272802233" ID="ID_883923201" MODIFIED="1377272804145" TEXT="lca">
<node CREATED="1377274325881" ID="ID_1440689563" MODIFIED="1377274330820" TEXT="when parent field is not present"/>
<node CREATED="1377274318824" ID="ID_1181856049" MODIFIED="1377274325173" TEXT="when parent field is present"/>
</node>
</node>
<node CREATED="1377272687630" FOLDED="true" ID="ID_119342915" MODIFIED="1377598103331" TEXT="traversal">
<node CREATED="1377272728668" ID="ID_673104092" MODIFIED="1377272735411" TEXT="zig zag order"/>
<node CREATED="1377272721907" FOLDED="true" ID="ID_917937522" MODIFIED="1377598086184" TEXT="level order">
<node CREATED="1377597015395" FOLDED="true" ID="ID_412364954" MODIFIED="1377598084824" TEXT="with line separating the levels">
<node CREATED="1377597587445" FOLDED="true" ID="ID_39744389" MODIFIED="1377597793079" TEXT="using only 1 queue">
<node CREATED="1377597595409" ID="ID_53960979" MODIFIED="1377597604013" TEXT="instead of two queues, we have two variables"/>
<node CREATED="1377597619302" ID="ID_1355560912" MODIFIED="1377597632872" TEXT="nodesInCurrentLevel, nodesInSecondLevel"/>
<node CREATED="1377597657920" ID="ID_144022047" MODIFIED="1377597680517" TEXT="on popping from queue, decrement nodesInCurrentLevel by 1"/>
<node CREATED="1377597681485" ID="ID_523411906" MODIFIED="1377597705019" TEXT="on pushing children to queue, increment nodesInNextLevel"/>
<node CREATED="1377597711359" FOLDED="true" ID="ID_450049140" MODIFIED="1377597790893" TEXT="when nodesInCurrentLevel reaches 0">
<node CREATED="1377597759613" ID="ID_1814441611" MODIFIED="1377597763470" TEXT="print new line"/>
<node CREATED="1377597768436" ID="ID_64486875" MODIFIED="1377597782757" TEXT="set nodesInCurrentLevel=nodesInNextLevel"/>
<node CREATED="1377597784115" ID="ID_1768249503" MODIFIED="1377597790252" TEXT="nodesInNextLevel=0"/>
</node>
</node>
<node CREATED="1377597532617" FOLDED="true" ID="ID_517294080" MODIFIED="1377598080726" TEXT="using 2 queues">
<node CREATED="1377597089933" ID="ID_450515863" MODIFIED="1377597103331" TEXT="use two queues, currentLevel and nextLevel"/>
<node CREATED="1377597104096" ID="ID_371796917" MODIFIED="1377597113746" TEXT="root is initially pushed to currentLevel"/>
<node CREATED="1377597115167" ID="ID_1534097177" MODIFIED="1377597127628" TEXT="its children are pushed to nextLevel"/>
<node CREATED="1377597135061" ID="ID_33534969" MODIFIED="1377597162013" TEXT="when currentLevel is empty, print new line"/>
<node CREATED="1377597162746" ID="ID_1576428433" MODIFIED="1377597173708" TEXT="swap(currentLevel,nextLevel)"/>
</node>
<node CREATED="1377597982208" FOLDED="true" ID="ID_1485688912" MODIFIED="1377598046078" TEXT="with ArrayList buffer">
<node CREATED="1377597995273" ID="ID_1384977273" MODIFIED="1377598009234" TEXT="on popping from queue, add children to AL"/>
<node CREATED="1377598009853" ID="ID_1508442616" MODIFIED="1377598017723" TEXT="print popped value"/>
<node CREATED="1377598018202" ID="ID_919850980" MODIFIED="1377598025546" TEXT="when queue is empty, print line"/>
<node CREATED="1377598026072" ID="ID_670944696" MODIFIED="1377598040930" TEXT="now add AL contents to queue"/>
</node>
</node>
<node CREATED="1377596999673" FOLDED="true" ID="ID_118593087" MODIFIED="1377598083417" TEXT="without line separating the levels">
<node CREATED="1377596476028" FOLDED="true" ID="ID_168870484" MODIFIED="1377598075361" TEXT="with queue">
<node CREATED="1377596502363" ID="ID_1717575052" MODIFIED="1377596546344" TEXT="create a queue and insert the root"/>
<node CREATED="1377596569021" ID="ID_1022977204" MODIFIED="1377596581101" TEXT="deque the node and print"/>
<node CREATED="1377596581601" ID="ID_1961548327" MODIFIED="1377596616045" TEXT="add the left and right of dequeued node to the queue"/>
</node>
<node CREATED="1377595941306" FOLDED="true" ID="ID_1513870265" MODIFIED="1377596488067" TEXT="without queue">
<node CREATED="1377596251698" ID="ID_439966748" MODIFIED="1377596261379" TEXT="resembles preorder traversal"/>
<node CREATED="1377596287119" ID="ID_1912273593" MODIFIED="1377596303006" TEXT="client invokes it for 1 to height"/>
<node CREATED="1377596262284" FOLDED="true" ID="ID_1838346268" MODIFIED="1377596473767" TEXT="printGivenLevel(tree,level)">
<node CREATED="1377596412949" ID="ID_587433362" MODIFIED="1377596416800" TEXT="if level is 1, print"/>
<node CREATED="1377596419419" ID="ID_1082591687" MODIFIED="1377596470867">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      else printGivenLevel(tree.left, level-1)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;printGivenLevel(tree.right,level-1)
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1377596481734" ID="ID_1750456730" MODIFIED="1377596487240" TEXT="quadratic complexity"/>
</node>
</node>
</node>
<node CREATED="1377586402380" FOLDED="true" ID="ID_1202884138" MODIFIED="1377598099945" TEXT="preorder iterative">
<node CREATED="1377586979430" FOLDED="true" ID="ID_554066946" MODIFIED="1377587033355" TEXT="idea">
<node CREATED="1377587007478" ID="ID_1993027103" MODIFIED="1377587026983" TEXT="so basically, left is pushed the latest"/>
<node CREATED="1377586985474" ID="ID_781098974" MODIFIED="1377586995062" TEXT="push in the opposite order of usual traversal"/>
</node>
<node CREATED="1377586950969" FOLDED="true" ID="ID_935991518" MODIFIED="1377587078550" TEXT="implementation">
<node CREATED="1377586418371" ID="ID_1920974004" MODIFIED="1377586501353" TEXT="create an empty stack S and push root"/>
<node CREATED="1377586517921" ID="ID_598973735" MODIFIED="1377587036072" TEXT="if stack is not empty">
<node CREATED="1377586546124" ID="ID_623723362" MODIFIED="1377586572036" TEXT="pop and print">
<icon BUILTIN="full-1"/>
</node>
<node CREATED="1377586549154" ID="ID_574749282" MODIFIED="1377586575737" TEXT="push the right child to S">
<icon BUILTIN="full-2"/>
</node>
<node CREATED="1377586558541" ID="ID_1662224707" MODIFIED="1377586578736" TEXT="push the left child to S">
<icon BUILTIN="full-3"/>
</node>
</node>
</node>
</node>
<node CREATED="1377592575501" FOLDED="true" ID="ID_831759754" MODIFIED="1377595153549" TEXT="postorder iterative">
<node CREATED="1377592586749" ID="ID_373466556" MODIFIED="1377592594325" TEXT="one stack approach"/>
<node CREATED="1377592580313" FOLDED="true" ID="ID_1838757433" MODIFIED="1377595151768" TEXT="two stack approach">
<node CREATED="1377592600480" ID="ID_1646651849" MODIFIED="1377592612884" TEXT="simulating a reversed preorder traversal"/>
<node CREATED="1377592616930" ID="ID_103145990" MODIFIED="1377592623600" TEXT="push root node to first stack"/>
<node CREATED="1377595086787" ID="ID_1726962630" MODIFIED="1377595099471" TEXT="pop the node from first stack and push to second stack"/>
<node CREATED="1377595100736" ID="ID_227498518" MODIFIED="1377595119403" TEXT="push the left node, then the right node to first stack"/>
<node CREATED="1377595130634" ID="ID_9083493" MODIFIED="1377595137366" TEXT="repeat until first stack is empty"/>
<node CREATED="1377595137835" ID="ID_46001118" MODIFIED="1377595148441" TEXT="second stack would have the postorder traversal"/>
</node>
</node>
<node CREATED="1377272712260" FOLDED="true" ID="ID_417021537" MODIFIED="1377586376754" TEXT="inorder iterative">
<node CREATED="1377586365480" FOLDED="true" ID="ID_103244133" MODIFIED="1377586374912" TEXT="stack based traversal">
<node CREATED="1377585461447" FOLDED="true" ID="ID_1480392683" MODIFIED="1377586361982" TEXT="idea">
<node CREATED="1377585463775" ID="ID_50304761" MODIFIED="1377585470868" TEXT="mirror the recursion using stack"/>
</node>
<node CREATED="1377585448995" FOLDED="true" ID="ID_764038" MODIFIED="1377585655795" TEXT="implementation">
<node CREATED="1377585160015" ID="ID_1742608287" MODIFIED="1377585167405" TEXT="create an empty stack"/>
<node CREATED="1377585171342" ID="ID_705278428" MODIFIED="1377585177591" TEXT="initialize current node as root"/>
<node CREATED="1377585186731" ID="ID_276201872" MODIFIED="1377585368094">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      push the current node to S and set current=current.left
    </p>
    <p>
      until current is null
    </p>
  </body>
</html></richcontent>
<icon BUILTIN="full-1"/>
</node>
<node CREATED="1377585232337" ID="ID_559835087" MODIFIED="1377585263569" TEXT="if current is null and stack is not empty, pop from stack"/>
<node CREATED="1377585270834" ID="ID_738582287" MODIFIED="1377585289942" TEXT="print the popped item and set current=current.right"/>
<node CREATED="1377585378577" ID="ID_546536158" MODIFIED="1377585389217" TEXT="repeat 1"/>
<node CREATED="1377585397123" ID="ID_1892272689" MODIFIED="1377585417325" TEXT="if current is null and stack is empty - we are done"/>
</node>
</node>
<node CREATED="1377586352940" ID="ID_1263719270" MODIFIED="1377586359936" TEXT="morris traversal (complex)"/>
</node>
<node CREATED="1377272692342" ID="ID_315364792" MODIFIED="1377272710600" TEXT="inorder, preorder, postorder recursive"/>
</node>
<node CREATED="1377274337868" ID="ID_318695692" MODIFIED="1377274339298" TEXT="depth"/>
<node CREATED="1377274351058" ID="ID_628499435" MODIFIED="1377274357020" TEXT="balanced or not"/>
<node CREATED="1377283958428" ID="ID_237559546" MODIFIED="1377283963595" TEXT="mirror"/>
<node CREATED="1377274290804" ID="ID_1823937580" MODIFIED="1377274296275" TEXT="convert to DLL"/>
</node>
</node>
</node>
</node>
</map>
