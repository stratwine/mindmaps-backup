<map version="0.9.0">
<!-- To view this file, download free mind mapping software FreeMind from http://freemind.sourceforge.net -->
<node CREATED="1377278066712" ID="ID_1366658628" MODIFIED="1377278071457" TEXT="Core Algorithms">
<node CREATED="1377279120046" FOLDED="true" ID="ID_877440416" MODIFIED="1377769325648" POSITION="right" TEXT="data compression">
<node CREATED="1377284503608" ID="ID_1719672789" MODIFIED="1377767303882" TEXT="huffman coding">
<node CREATED="1377767306147" ID="ID_1887235231" MODIFIED="1377768771966" TEXT="how the compression works">
<node CREATED="1377767311178" FOLDED="true" ID="ID_205462397" MODIFIED="1377768818480" TEXT="create symbol-to-code mapping (Trie T)">
<node CREATED="1377767109405" ID="ID_222891944" MODIFIED="1377767116420" TEXT="bottom up. 1 node each char"/>
<node CREATED="1377767118311" ID="ID_237893798" MODIFIED="1377767145294" TEXT="sorted order by weights (least priority first)"/>
<node CREATED="1377767148513" FOLDED="true" ID="ID_95927407" MODIFIED="1377767845267" TEXT="merge two of smallest weights with a new int node">
<node CREATED="1377767164262" ID="ID_1631974926" MODIFIED="1377767177887">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      the new node's weight is
    </p>
    <p>
      the sum of the children
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1377767200589" ID="ID_1006869779" MODIFIED="1377767212260" TEXT="screams MinPQ for implementation"/>
<node CREATED="1377767228103" FOLDED="true" ID="ID_1922429523" MODIFIED="1377767247650" TEXT="do until only one node is left">
<node CREATED="1377767234228" ID="ID_1912253637" MODIFIED="1377767246572" TEXT="root node"/>
</node>
</node>
<node CREATED="1377767664477" FOLDED="true" ID="ID_971987999" MODIFIED="1377768089211" TEXT="result is a trie, that gives huffman code for symbols">
<node CREATED="1377762819117" ID="ID_216639223" MODIFIED="1377768078008" TEXT="structure">
<node CREATED="1377762827241" ID="ID_1896176715" MODIFIED="1377762843725" TEXT="char ch; // for leaf only"/>
<node CREATED="1377762844100" ID="ID_189627295" MODIFIED="1377762859459" TEXT="int freq; // for leaf only"/>
<node CREATED="1377762860006" ID="ID_1861709930" MODIFIED="1377762877646" TEXT="Node left, right"/>
<node CREATED="1377762881349" ID="ID_1520497156" MODIFIED="1377762883630" TEXT="isLeaf()"/>
<node CREATED="1377762884723" ID="ID_1401925809" MODIFIED="1377762888176" TEXT="compareTo()"/>
</node>
</node>
</node>
<node CREATED="1377767421487" FOLDED="true" ID="ID_232958664" MODIFIED="1377769207371" TEXT="encode the message using huffman code">
<node CREATED="1377768216394" ID="ID_174505471" MODIFIED="1377768226081" TEXT="read through the message M"/>
<node CREATED="1377768227112" ID="ID_96460425" MODIFIED="1377768238440" TEXT="for each character, traverse in trie T"/>
<node CREATED="1377768239424" ID="ID_907046374" MODIFIED="1377768250142" TEXT="on reaching leaf, write the 8 bit character"/>
<node CREATED="1377768251752" ID="ID_457370929" MODIFIED="1377768259501" TEXT="continue till the entire message is encoded"/>
</node>
<node CREATED="1377767447220" FOLDED="true" ID="ID_942854336" MODIFIED="1377768651658" TEXT="also send the symbol-code mapping">
<node CREATED="1377763478232" FOLDED="true" ID="ID_1111327741" MODIFIED="1377768650096" TEXT="how to write the trie">
<node CREATED="1377763484794" ID="ID_367656169" MODIFIED="1377768273954" TEXT="traverse the trie in preorder"/>
<node CREATED="1377763512652" ID="ID_501201055" MODIFIED="1377763518715" TEXT="for internal node, write a 0"/>
<node CREATED="1377763519699" ID="ID_1194524642" MODIFIED="1377768123335" TEXT="for leaf, write a 1 followed by 8bit symbol"/>
</node>
</node>
<node CREATED="1377768741061" ID="ID_1497587334" MODIFIED="1377768749764" TEXT="also send the number of symbols in message"/>
<node CREATED="1377767517499" FOLDED="true" ID="ID_887359230" MODIFIED="1377768739108">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      with trie T and compressed message CM,
    </p>
    <p>
      original message M can be decoded
    </p>
  </body>
</html></richcontent>
<node CREATED="1377762623468" FOLDED="true" ID="ID_1184617386" MODIFIED="1377768737796" TEXT="decode">
<node CREATED="1377762639608" FOLDED="true" ID="ID_821388964" MODIFIED="1377768701438" TEXT="read-in the serialized trie: readTrie()">
<node CREATED="1377763747300" FOLDED="true" ID="ID_391748120" MODIFIED="1377768696438" TEXT="Create a leaf on 1">
<node CREATED="1377763775408" ID="ID_1065214188" MODIFIED="1377763823640" TEXT="read the next 8 bits"/>
<node CREATED="1377763824281" ID="ID_1968109107" MODIFIED="1377763827375" TEXT="create a new node"/>
<node CREATED="1377763827750" ID="ID_1932253067" MODIFIED="1377763833421" TEXT="set this as character"/>
<node CREATED="1377763833749" ID="ID_1927239129" MODIFIED="1377763842046" TEXT="set freq as 0"/>
<node CREATED="1377763842358" ID="ID_1064908888" MODIFIED="1377763847921" TEXT="set left and right as null"/>
<node CREATED="1377763854546" ID="ID_414417002" MODIFIED="1377763857358" TEXT="return this node"/>
</node>
<node CREATED="1377764378947" FOLDED="true" ID="ID_764128469" MODIFIED="1377768699422">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      read two leaf nodes and connect
    </p>
    <p>
      them with a non leaf node
    </p>
  </body>
</html></richcontent>
<node CREATED="1377764297841" ID="ID_457003202" MODIFIED="1377764310934" TEXT="Node x=readTrie()"/>
<node CREATED="1377764311590" ID="ID_1935286234" MODIFIED="1377764317028" TEXT="Node y=readTrie()"/>
<node CREATED="1377764340058" ID="ID_450568864" MODIFIED="1377764357557" TEXT="return new Node(null,null,x,y)"/>
</node>
</node>
<node CREATED="1377762633061" ID="ID_1910108870" MODIFIED="1377762985235" TEXT="start from the root of the trie"/>
<node CREATED="1377762653576" FOLDED="true" ID="ID_1604923113" MODIFIED="1377768737186" TEXT="loop through the number of symbols">
<node CREATED="1377763163072" ID="ID_1249100986" MODIFIED="1377763174415" TEXT="on reading each"/>
<node CREATED="1377763180509" ID="ID_1950120729" MODIFIED="1377763188555" TEXT="if 0, move left on trie"/>
<node CREATED="1377763188915" ID="ID_1619725750" MODIFIED="1377763193962" TEXT="if 1, move right on trie"/>
<node CREATED="1377763242147" ID="ID_1762485565" MODIFIED="1377763253303" TEXT="on reaching leaf"/>
<node CREATED="1377763253944" ID="ID_538461888" MODIFIED="1377763433296" TEXT="print out the symbol (in 8 bits)"/>
<node CREATED="1377763362893" ID="ID_1625519936" MODIFIED="1377763374251" TEXT="look for the next symbol"/>
</node>
</node>
</node>
</node>
<node CREATED="1377767635822" FOLDED="true" ID="ID_1304470911" MODIFIED="1377768800152" TEXT="principles">
<node CREATED="1377761527635" ID="ID_1357981381" MODIFIED="1377761542681" TEXT="created with freq of symbols in mind"/>
<node CREATED="1377761548665" ID="ID_704422487" MODIFIED="1377761561305" TEXT="higher frequency - smaller length"/>
<node CREATED="1377761561712" ID="ID_480237828" MODIFIED="1377761570461" TEXT="low frequency - bigger length"/>
<node CREATED="1377761637381" FOLDED="true" ID="ID_1644526023" MODIFIED="1377768593020" TEXT="O(nlogn) for construction">
<node CREATED="1377761658583" ID="ID_528644625" MODIFIED="1377761674942" TEXT="later, O(n) algorithm was found"/>
<node CREATED="1377761675410" ID="ID_759701959" MODIFIED="1377761704800" TEXT="if the freq / weight probabiltity was known"/>
</node>
<node CREATED="1377762503285" ID="ID_1072140760" MODIFIED="1377762507878" TEXT="no code is a prefix of another"/>
<node CREATED="1377767725569" ID="ID_411600149" MODIFIED="1377767734725" TEXT="optimal compression"/>
</node>
</node>
<node CREATED="1377761849138" ID="ID_1222780227" MODIFIED="1377761871434" TEXT="lzw coding"/>
<node CREATED="1377762403070" FOLDED="true" ID="ID_507442927" MODIFIED="1377762440006" TEXT="morse code">
<node CREATED="1377762408617" ID="ID_1459713296" MODIFIED="1377762412788" TEXT="not effecient"/>
<node CREATED="1377762413132" ID="ID_1147883881" MODIFIED="1377762416710" TEXT="ambiguous"/>
<node CREATED="1377762417663" ID="ID_1345718373" MODIFIED="1377762425460" TEXT="require space or stop character"/>
</node>
</node>
<node CREATED="1377278392862" ID="ID_261645893" MODIFIED="1377281442311" POSITION="left" TEXT="find kth element"/>
<node CREATED="1377278387772" ID="ID_1502850913" MODIFIED="1377281432589" POSITION="left" TEXT="partition"/>
<node CREATED="1377279035711" ID="ID_296837475" MODIFIED="1377279046108" POSITION="left" TEXT="dfs, bfs, topological sort"/>
<node CREATED="1377284688426" FOLDED="true" ID="ID_904075170" MODIFIED="1377762366650" POSITION="left" TEXT="binary search">
<node CREATED="1377284693404" ID="ID_1550190190" MODIFIED="1377284695526" TEXT="iterative"/>
<node CREATED="1377284695892" ID="ID_44554275" MODIFIED="1377284699156" TEXT="recursive"/>
</node>
<node CREATED="1377278137148" FOLDED="true" ID="ID_1368470942" MODIFIED="1377284572701" POSITION="left" TEXT="sort">
<node COLOR="#338800" CREATED="1377278224524" ID="ID_1876784634" MODIFIED="1377278334428" TEXT="Heap sort"/>
<node COLOR="#338800" CREATED="1377278221211" ID="ID_1657673400" MODIFIED="1377284524428" TEXT="Merge sort">
<node CREATED="1377284550553" ID="ID_678038380" MODIFIED="1377284554641" TEXT="for linked lists"/>
<node CREATED="1377284526540" ID="ID_1841648592" MODIFIED="1377284544579" TEXT="for huge files in external storage"/>
<node CREATED="1377280490935" FOLDED="true" ID="ID_659650408" MODIFIED="1377281400405" TEXT="Implementation">
<node CREATED="1377280496060" ID="ID_960691317" MODIFIED="1377280505991" TEXT="Have the left section mergesorted"/>
<node CREATED="1377280506527" ID="ID_1199982781" MODIFIED="1377280513201" TEXT="Have the right section mergesorted"/>
<node CREATED="1377280514280" ID="ID_1519754430" MODIFIED="1377280524693" TEXT="Now merge these two sorted sections"/>
<node CREATED="1377280941973" ID="ID_1663396012" MODIFIED="1377280963983" TEXT="Base case:  high &lt;= low"/>
<node CREATED="1377280569161" ID="ID_1584070025" MODIFIED="1377280572151" TEXT="More">
<node CREATED="1377280573313" ID="ID_1856707027" MODIFIED="1377280585822" TEXT="create a copy of the original array (aux)"/>
<node CREATED="1377280586727" ID="ID_1688107099" MODIFIED="1377280603233" TEXT="pass this aux for each recursive call"/>
<node CREATED="1377280632540" ID="ID_626460316" MODIFIED="1377280977614" TEXT="use this aux array in merge step">
<node CREATED="1377280667421" ID="ID_1493893181" MODIFIED="1377280709800" TEXT="the traversing pointers&#xa;(leftSide and rightSide) stay&#xa;in this aux array"/>
<node CREATED="1377280651492" ID="ID_243670103" MODIFIED="1377280666415" TEXT="the filling pointers remain in&#xa;the original array"/>
<node CREATED="1377280888466" ID="ID_650345778" MODIFIED="1377280904280" TEXT="the aux array is never modified"/>
</node>
</node>
</node>
</node>
<node COLOR="#338800" CREATED="1377278215529" FOLDED="true" ID="ID_151276631" MODIFIED="1377281087015" TEXT="Quick sort">
<node CREATED="1377279762648" FOLDED="true" ID="ID_1545819228" MODIFIED="1377279940022" TEXT="Implementation">
<node CREATED="1377279514584" ID="ID_1032836601" MODIFIED="1377279541767" TEXT="take the last element as pivot (simple version)"/>
<node CREATED="1377279524098" ID="ID_155435606" MODIFIED="1377279577148" TEXT="call the partition algorithm"/>
<node CREATED="1377279544796" ID="ID_278584400" MODIFIED="1377279574238" TEXT="place all smaller elements to left&#xa;and bigger elements to right"/>
<node CREATED="1377279589552" ID="ID_867182601" MODIFIED="1377279617939" TEXT="that chosen pivot element&apos;s position&#xa;has changed after the partition"/>
<node CREATED="1377279679451" ID="ID_186226517" MODIFIED="1377279700715" TEXT="at least this element is now in&#xa;it&apos;s final place"/>
<node CREATED="1377279618957" ID="ID_1110452218" MODIFIED="1377279677869" TEXT="return this new position"/>
<node CREATED="1377279639667" ID="ID_1695520330" MODIFIED="1377279716863" TEXT="call quicksort to the left of this position"/>
<node CREATED="1377279667440" ID="ID_575002164" MODIFIED="1377279676218" TEXT="call quicksort to the right of the position"/>
<node CREATED="1377279923275" ID="ID_822109953" MODIFIED="1377279937404" TEXT="base case: one element ? return it"/>
</node>
<node CREATED="1377279827447" ID="ID_13952595" MODIFIED="1377281067733" TEXT="Base idea">
<node CREATED="1377279851245" ID="ID_667141853" MODIFIED="1377279865021" TEXT="each time, the pivot goes to its final place"/>
<node CREATED="1377279878473" ID="ID_457817274" MODIFIED="1377279908781" TEXT="the rearrage region is shortened considerably"/>
</node>
<node CREATED="1377278406670" ID="ID_1040871632" MODIFIED="1377279791771" TEXT="Randomized version gives the benefit"/>
<node CREATED="1377279792837" ID="ID_382675775" MODIFIED="1377281066214" TEXT="Normal version is quadratic"/>
</node>
<node CREATED="1377278240619" ID="ID_1698142078" MODIFIED="1377278372234" TEXT="Indirect sort">
<font NAME="SansSerif" SIZE="12"/>
</node>
<node CREATED="1377278247468" ID="ID_212975373" MODIFIED="1377278253072" TEXT="Count sort"/>
<node CREATED="1377278264817" ID="ID_1092120063" MODIFIED="1377278268125" TEXT="Radix sort"/>
<node CREATED="1377278292570" ID="ID_1634614396" MODIFIED="1377278299672" TEXT="Bubble sort"/>
<node CREATED="1377278300433" ID="ID_1365465588" MODIFIED="1377278304320" TEXT="Selection sort"/>
<node CREATED="1377278305647" ID="ID_364379525" MODIFIED="1377278308795" TEXT="Insertion sort"/>
</node>
<node CREATED="1377279113819" ID="ID_1516872873" MODIFIED="1377279119491" POSITION="left" TEXT="regular expressions"/>
<node CREATED="1377279051346" ID="ID_635229934" MODIFIED="1384935860408" POSITION="right" TEXT="substring search">
<node CREATED="1377279065785" ID="ID_906920403" MODIFIED="1377284499327" TEXT="kmp">
<node CREATED="1384935870391" ID="ID_394036954" MODIFIED="1384935882532" TEXT="based on building a dfa"/>
<node CREATED="1384936425730" FOLDED="true" ID="ID_1947287266" MODIFIED="1384937586399" TEXT="there are two routines">
<node CREATED="1384936439877" ID="ID_944121521" MODIFIED="1384936448679" TEXT="serach using the dfa">
<node CREATED="1384936461884" ID="ID_981288440" MODIFIED="1384936469721" TEXT="are we in state j ?"/>
<node CREATED="1384936470129" ID="ID_639393591" MODIFIED="1384936486866" TEXT="that means that j characters of text suffix, have matched with "/>
<node CREATED="1384936487459" ID="ID_1618504459" MODIFIED="1384936495796" TEXT="j characters of pattern as prefix"/>
<node CREATED="1384936504481" ID="ID_635316923" MODIFIED="1384936515473" TEXT="have we reached, j==M ? "/>
<node CREATED="1384936515886" ID="ID_525856495" MODIFIED="1384936528813" TEXT="then the string is found"/>
</node>
<node CREATED="1384936449097" ID="ID_1163169931" MODIFIED="1384936459991" TEXT="prerequisite:building of the dfa"/>
</node>
<node CREATED="1384935916784" FOLDED="true" ID="ID_107748123" MODIFIED="1384937584964" TEXT="to build dfa">
<node CREATED="1384935922556" ID="ID_168260917" MODIFIED="1384935946903" TEXT="track state X (non matching case)"/>
<node CREATED="1384935951391" ID="ID_1235255657" MODIFIED="1384935967128" TEXT="what would happen for this input, had we been in state X ?"/>
<node CREATED="1384935967886" ID="ID_1378764598" MODIFIED="1384935977525" TEXT="that&apos;s updated in the current state"/>
<node CREATED="1384935978078" ID="ID_893303929" MODIFIED="1384935983495" TEXT="these form the mismatch cases"/>
<node CREATED="1384935983813" ID="ID_1681090168" MODIFIED="1384935993145" TEXT="now for the matching case">
<node CREATED="1384936062265" ID="ID_1819351975" MODIFIED="1384936640715" TEXT="if you are in the j&apos;th state, (you know you&apos;ve matched j characters)"/>
<node CREATED="1384936104060" ID="ID_469696453" MODIFIED="1384936689800" TEXT="and you match correctly with the next character :pat.charAt(j)"/>
<node CREATED="1384936114680" ID="ID_518952511" MODIFIED="1384936703055" TEXT="then we know that we&apos;ve matched j+1 characters. "/>
<node CREATED="1384936704313" ID="ID_1192667908" MODIFIED="1384936707370" TEXT="so move along"/>
</node>
</node>
</node>
<node CREATED="1377279061522" ID="ID_1823870824" MODIFIED="1377279079994" TEXT="rabin karp"/>
<node CREATED="1377279071427" ID="ID_785091884" MODIFIED="1377284495463" TEXT="boyer moore"/>
</node>
</node>
</map>
